<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cpp学习文档（八）结构体</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%AB%EF%BC%89%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%AB%EF%BC%89%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>结构体属于自定义数据类型，允许用户存储不同数据类型</p><p><code>struct 结构体名字&#123;结构体成员列表 &#125;;</code><br>通过结构体创建变量的三种方式</p><ol><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 &#x3D;{成员1值，成员2值}</li><li>定义结构体时顺便创建变量</li></ol><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><ol><li>语法，普通的结构体数组</li><li><code>stuct 结构体名,数组名[]=&#123;&#123;&#125;,&#123;&#125;,&#123;&#125;&#125;;</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">struct Student</span><br><span class="line">&#123;</span><br><span class="line">//成员列表</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line">int score;</span><br><span class="line">&#125;s3;//创建了一个结构体变量，王五</span><br><span class="line">//struct结构体创建时，struct可以省略</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Student s1;</span><br><span class="line">s1.name = &quot;张三&quot;;</span><br><span class="line">s1.age = 18;</span><br><span class="line">s1.score = 100;</span><br><span class="line">cout &lt;&lt; s1.name &lt;&lt; &quot;\t&quot; &lt;&lt; s1.age &lt;&lt; &quot;\t&quot; &lt;&lt; s1.score &lt;&lt; endl;</span><br><span class="line">Student s2 = &#123; &quot;王五&quot;,20,80 &#125;;</span><br><span class="line">cout &lt;&lt; s2.name &lt;&lt; &quot;\t&quot; &lt;&lt; s2.age &lt;&lt; &quot;\t&quot; &lt;&lt; s2.score &lt;&lt; endl;</span><br><span class="line">Student stuarr[] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;&quot;张三&quot;,18,100&#125;,</span><br><span class="line">&#123;&quot;李四&quot;,20,99&#125;,</span><br><span class="line">&#123;&quot;王五&quot;,66,50&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体嵌套结构体"><a href="#结构体嵌套结构体" class="headerlink" title="结构体嵌套结构体"></a>结构体嵌套结构体</h2><h2 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h2><p>作用：将结构体作为参数向函数中传递</p><ol><li>值传递</li><li>地址传递</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">struct Student</span><br><span class="line">&#123;</span><br><span class="line">//成员列表</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line">int score;</span><br><span class="line">&#125;s3;//创建了一个结构体变量，王五</span><br><span class="line"></span><br><span class="line">struct teacher</span><br><span class="line">&#123;</span><br><span class="line">int id;</span><br><span class="line">string name;</span><br><span class="line">int age;</span><br><span class="line">struct Student stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//struct结构体创建时，struct可以省略</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">teacher t;</span><br><span class="line">t.id = 10000;</span><br><span class="line">t.name = &quot;王五&quot;;</span><br><span class="line">t.age = 50;</span><br><span class="line">t.stu.name = &quot;小王&quot;;</span><br><span class="line">t.stu.age = 20;</span><br><span class="line">t.stu.score = 100;</span><br><span class="line">//结构体做函数参数，将学生作为参数</span><br><span class="line">Student s1 = &#123;&quot;小王&quot;,20,100&#125;;</span><br><span class="line">void printstu(Student s);</span><br><span class="line">printstu(s1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//1.值传递</span><br><span class="line">void printstu(Student s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名是：&quot; &lt;&lt; s.name &lt;&lt; &quot;\t年龄是：&quot; &lt;&lt; s.age &lt;&lt; &quot;\t分数是：&quot; &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//2.地址传递</span><br><span class="line">void printstu(Student *s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名是：&quot; &lt;&lt; *s-&gt;name &lt;&lt; &quot;\t年龄是：&quot; &lt;&lt; *s-&gt;age &lt;&lt; &quot;\t分数是：&quot; &lt;&lt; *s-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//如果想改变主函数中的值，可以考虑地址传递，不改变主函数，值传递</span><br></pre></td></tr></table></figure><h2 id="struct-const使用场景"><a href="#struct-const使用场景" class="headerlink" title="struct const使用场景"></a>struct const使用场景</h2><p>值传递占用较多的内存，改用地址传递，可减少地址占用<br><code>const student *p——struct不能够修改了</code></p><h2 id="结构体案例1"><a href="#结构体案例1" class="headerlink" title="结构体案例1"></a>结构体案例1</h2><p>学校正在做毕业设计，每名老师带领5个学生，总共有3名老师，需求如下<br>设计老师与学生结构体，其中在老师的结构体中，有老师姓名与存放5名学生的数组作为成员<br>学生的成员有姓名，考试分数，常见数组存放3明老师，通过函数给每个老师及所带领的学生赋值<br>最终打印出老师数据以及老师所带的学生数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line">struct student </span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">int score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct teacher</span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">struct student stu[5];</span><br><span class="line">&#125;;</span><br><span class="line">//1. 通过函数给每个老师及所带的学生进行赋值</span><br><span class="line">//2. 打印出每名老师及其所带领的学生</span><br><span class="line">void printstu(student *p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名为：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot;  成绩为：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void printtea(teacher *p)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; 3; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;老师名为：&quot; &lt;&lt; (p+j)-&gt;name &lt;&lt; endl;</span><br><span class="line">for (int i = 0; i &lt; 5; i++)</span><br><span class="line">&#123;</span><br><span class="line">printstu(&amp;(p + j)-&gt;stu[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//随机数种子</span><br><span class="line">srand((unsigned int)time(NULL));</span><br><span class="line">teacher teacherarr[3];</span><br><span class="line">int len = sizeof(teacherarr) / sizeof(teacherarr[0]);</span><br><span class="line">void allocatespace(teacher *p, int len);</span><br><span class="line">allocatespace(teacherarr, len);</span><br><span class="line">printtea(teacherarr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void allocatespace(teacher *p, int len)</span><br><span class="line">&#123;</span><br><span class="line">char sort[] = &#123; &#x27;A&#x27;,&#x27;B&#x27;,&#x27;D&#x27;,&#x27;D&#x27;,&#x27;E&#x27; &#125;;</span><br><span class="line">string name_tea = &quot;teacher_&quot;;</span><br><span class="line">string name_stu = &quot;student_&quot;;</span><br><span class="line">for (int i = 0; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">(p+i)-&gt;name = name_tea;</span><br><span class="line">(p + i)-&gt;name= (p + i)-&gt;name + sort[i];</span><br><span class="line">for (int j = 0; j &lt; 5; j++)</span><br><span class="line">&#123;</span><br><span class="line">(p + i)-&gt;stu[j].name = name_stu;</span><br><span class="line">(p + i)-&gt;stu[j].name = (p + i)-&gt;stu[j].name + sort[j];</span><br><span class="line">(p + i)-&gt;stu[j].score = rand()%100+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>设计一个英雄的结构体，包括成员的姓名，年龄，性别，创建结构体数组，数组中存放五名英雄。<br>通过设置冒泡排序的算法，将数组中的英雄按照年龄进行升序排列，最重打印排序后的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//1.创建英雄结构体</span><br><span class="line">struct hero//英雄结构体</span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">int year;</span><br><span class="line">string sex;</span><br><span class="line">&#125;;</span><br><span class="line">void bubblesort(hero* p)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; 5; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; 5-i-1; j++)</span><br><span class="line">&#123;</span><br><span class="line">if ((p+j)-&gt;year &gt; (p + j+1)-&gt;year)</span><br><span class="line">&#123; </span><br><span class="line">string a = (p + j)-&gt;name; string b = (p + j)-&gt;sex; int c = (p + j)-&gt;year;</span><br><span class="line">(p + j)-&gt;name = (p + j+1)-&gt;name; (p + j)-&gt;sex = (p + j + 1)-&gt;sex; (p + j)-&gt;year = (p + j + 1)-&gt;year;</span><br><span class="line">(p + j+1)-&gt;name = a; (p + j+1)-&gt;sex = b; (p + j+1)-&gt;year = c;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void printhero(hero* p)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0;i &lt; 5;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;英雄名：&quot; &lt;&lt; (p + i)-&gt;name &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;性别是：&quot; &lt;&lt; (p + i)-&gt;sex &lt;&lt; &quot;\t&quot;&quot;年龄是&quot; &lt;&lt; (p + i)-&gt;year &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//2.创建结构体数组</span><br><span class="line">hero hero5[5] = </span><br><span class="line">&#123; </span><br><span class="line">&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">//3.冒泡法按照年龄进行升序排列</span><br><span class="line">bubblesort(hero5);</span><br><span class="line">//4. 打印排序后的结果</span><br><span class="line">printhero(hero5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（七）指针</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%B8%83%EF%BC%89%E6%8C%87%E9%92%88/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%B8%83%EF%BC%89%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h1><p>作用：可以通过指针来直接访问内存</p><ol><li>内存编号从0开始记录，一般用十六进制的数字进行表示</li><li>可以利用指针变量保存地址</li></ol><p>指针就是一个地址<br>注意</p><ol><li>定义一个指针  数据类型 *指针变量名称   ——让指针记录a的地址</li><li>使用指针   可以用过解引用的操作找到指针指向的内存，指针前*代表解引用，找到指针指向的内存中的数据</li></ol><h2 id="指针所占用的内存空间"><a href="#指针所占用的内存空间" class="headerlink" title="指针所占用的内存空间"></a>指针所占用的内存空间</h2><p>指针也是一种数据类型，所占多少空间内存？<br>32位操作系统，占用4个字节<br>64位操作系统，占用8个字节</p><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>指针变量指向内存中编号为0的空间<br>用途：初始化指针变量<br>注意：空指针指向的内存是不可以直接访问的</p><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>指针变量指向非法的内存空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//空指针用于给指针变量进行初始化</span><br><span class="line">int* p = NULL;</span><br><span class="line">//空指针不可以直接进行访问</span><br><span class="line">//0-255之间的内存编号是系统占用的，因此不可以访问</span><br><span class="line">*p = 100;</span><br><span class="line"></span><br><span class="line">//野指针</span><br><span class="line">int* p1 = (int*)0x1100;</span><br><span class="line">cout &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h2><ol><li>const修饰指针——常量指针，指针的指向可以修改，指针指向的值不可以修改</li><li>const修饰常量——指针常量，int * const p&#x3D;&a;指针指向的值可以修改，指针指向不可以修改</li><li>const即修饰指针，有修饰常量<br>const int * const a&#x3D;&b;指针的指向与指针指向的值都不可以修改</li></ol><h2 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h2><p>利用指针访问数组中的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int arr[] = &#123; 1,2,3,4,5,6,7,8,9 &#125;;</span><br><span class="line">int* p = arr;</span><br><span class="line">cout &lt;&lt; &quot;利用指针访问第一个元素&quot; &lt;&lt; *(p+1) &lt;&lt; endl;//整形指针偏移4个</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h2><ol><li>值传递</li><li>地址传递</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void swap(int num1, int num2)//值传递</span><br><span class="line">&#123;</span><br><span class="line">int temp = num2;</span><br><span class="line">num2 = num1;</span><br><span class="line">num1 = temp;</span><br><span class="line">&#125;</span><br><span class="line">void swap1(int *p, int *p1)//地址传递</span><br><span class="line">&#123;</span><br><span class="line">int temp = *p1;</span><br><span class="line">*p1 = *p;</span><br><span class="line">*p = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">swap(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">swap1(&amp;a, &amp;b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例——冒泡排序"><a href="#案例——冒泡排序" class="headerlink" title="案例——冒泡排序"></a>案例——冒泡排序</h2><p>封装一个函数，利用冒泡排序，实现对整形数组的升序排序<br>例如数组：int arr[]&#x3D;{4,3,6,9,1,2,10,8,7,5};</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void bubblesort(int *arr, int len)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; len; i++)//外循环</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; len-i-1; j++)//内循环——比较次数</span><br><span class="line">&#123;</span><br><span class="line">if (*(arr+j) &gt; *(arr + j+1)) &#123; int c = *(arr + j+1); *(arr + j+1) = *(arr+j); *(arr+j) = c; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//1. 先创建数组</span><br><span class="line">int arr[] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;</span><br><span class="line">//2.创建函数实验冒泡排序</span><br><span class="line">//bubblesort(arr,len)//数组地址，数组的长度</span><br><span class="line">int len = sizeof(arr) / sizeof(arr[0]);</span><br><span class="line">bubblesort(arr, len);</span><br><span class="line">for (int i = 0; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//3.打印排序后的冒泡排序</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（六）函数</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%AD%EF%BC%89%E5%87%BD%E6%95%B0/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%AD%EF%BC%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>将常用的代码进行封装，减少重复代码的使用<br>一个较大程序一般分为若干个较小的程序块，每个模块以实现特定的功能</p><h2 id="6-1-函数的定义"><a href="#6-1-函数的定义" class="headerlink" title="6.1 函数的定义"></a>6.1 函数的定义</h2><ol><li>返回的类型</li><li>函数名</li><li>参数列表</li><li>函数体语句</li><li>return语句</li></ol><p>返回值类型 函数名[参数列表]<br>{<br>    函数体；<br>    retuern 表达式；<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//实现一个加法的函数，计算两个数相加的结果</span><br><span class="line">int sum(int a, int b)//函数定义的时候，a，b没有真实的值，是形参，调用后实参赋值给形参</span><br><span class="line">&#123;</span><br><span class="line">int sumadd = a + b;</span><br><span class="line">return sumadd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">int a = 1; int b = 10;</span><br><span class="line">int num = sum(a, b);</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>所谓的值传递，就是函数调用时实参将数值传入形参<br>值传递时，如果形参发生改变，不会影响实参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">int sum(int a, int b)//函数定义的时候，a，b没有真实的值，是形参，调用后实参赋值给形参</span><br><span class="line">&#123;</span><br><span class="line">int sumadd = a + b;</span><br><span class="line">return sumadd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义函数，两个函数进行交换的函数</span><br><span class="line">void swap(int num1, int num2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">int c = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = c;</span><br><span class="line">cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//返回值不需要时，可以不写return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">int a = 1; int b = 10;</span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的常见样式"><a href="#函数的常见样式" class="headerlink" title="函数的常见样式"></a>函数的常见样式</h2><ol><li>无参无返</li><li>有参无返  </li><li>无参有返</li><li>有参有返</li></ol><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><p>作用：告诉编译器函数名称及如何调用函数，函数的主体可以单独定义<br>函数的声明可以多次，但是函数的定义只能有一次 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//如果在后边则，利用函数生声明，提前告诉函数存在</span><br><span class="line">int max(int a, int b);</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">int a = 1; int b = 10;</span><br><span class="line">cout &lt;&lt; max(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int max(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">return a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的分文件编写"><a href="#函数的分文件编写" class="headerlink" title="函数的分文件编写"></a>函数的分文件编写</h2><p>作用：让代码更加清晰<br>函数分文件编写一般有4个步骤</p><ol><li>船舰后缀名称为.h的头文件</li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的成名</li><li>在源文件中写函数的定义</li></ol>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（五）数组</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%BA%94%EF%BC%89%E6%95%B0%E7%BB%84/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%BA%94%EF%BC%89%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>所谓数组就是一个集合，里面存放了相同数据类型的集合<br>特点1.每个元素都是相同的数据类型<br>特别2.数字是由连续的内存位置组成</p><h2 id="5-1-一维数组"><a href="#5-1-一维数组" class="headerlink" title="5.1 一维数组"></a>5.1 一维数组</h2><ol><li>数据类型 数组名[数组长度];</li><li>数据类型 数组名[数组长度]&#x3D;{值1,值2，…};如果在初始化数据没有全部填写，则会用0填补剩余数据</li><li>数据类型 数组名[]&#x3D;{值1,值2，…};&#x2F;&#x2F;可知道里面有多少数量<br>arr[0];arr[1];arr[2]…我们可以通过下表来访问对应元素<br>定义数组的时候必须有初始长度</li></ol><h2 id="5-1-1-一维数组的数组名"><a href="#5-1-1-一维数组的数组名" class="headerlink" title="5.1.1 一维数组的数组名"></a>5.1.1 一维数组的数组名</h2><ol><li>可以统计整个数组在内存中的长度</li></ol><p><code>sizeof(arr)/sizeof(arr[0]);</code></p><ol><li>可以获得数组在内存中的首地址</li></ol><p><code>cout&lt;&lt;arr&lt;&lt;endl;</code><br>数组名是一个常量，不可以进行赋值操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">int arr[] = &#123; 1,2,3,4,5,6,7,8,9 &#125;;</span><br><span class="line">cout &lt;&lt; &quot;long：&quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl &lt;&lt; sizeof(arr) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;首地址：&quot; &lt;&lt; arr&lt;&lt;&quot;int：&quot;&lt;&lt;(int)arr &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;元素首地址&quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;</span><br><span class="line">//数组名是一个常量，不可以进行赋值操作</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例五只小猪称重"><a href="#案例五只小猪称重" class="headerlink" title="案例五只小猪称重"></a>案例五只小猪称重</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//五只小猪称体重</span><br><span class="line">//一个数组中记录了五只小数的体重，如int arr[]=&#123;300,400,500,250&#125;</span><br><span class="line">//找出并打印体重最大的那只小猪的体重</span><br><span class="line"></span><br><span class="line">int arr[] = &#123; 300,350,200,400,250 &#125;;</span><br><span class="line">int max = arr[0];</span><br><span class="line">for (int i = 1; i &lt;= 4; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (max &lt; arr[i]) &#123; max = arr[i]; &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; max &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元素逆置"><a href="#元素逆置" class="headerlink" title="元素逆置"></a>元素逆置</h2><p>请声明一个5元素的数组，并且将元素进行逆置<br>例如{1,3,2,5,4}，逆置后结果为{4，5，2，3，1}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//数组倒置</span><br><span class="line">int arr[] = &#123; 1,2,3,4,5 &#125;;</span><br><span class="line">for (int i = 0; i &lt; 5; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot;\t&quot;; &#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">int len = sizeof(arr) / sizeof(arr[0]);</span><br><span class="line">for (int i = 0; i &lt; len / 2; i++)</span><br><span class="line">&#123;</span><br><span class="line">int c = arr[i];</span><br><span class="line">arr[i] = arr[len - 1 - i];</span><br><span class="line">arr[len - 1 - i] = c;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*cout &lt;&lt; arr &lt;&lt; endl;*/</span><br><span class="line">for (int i = 0; i &lt; 5; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot;\t&quot;; &#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本算法-冒泡排序"><a href="#基本算法-冒泡排序" class="headerlink" title="基本算法 冒泡排序"></a>基本算法 冒泡排序</h2><ol><li>最常用的排序方法，对数组内的元素进行排序<br>步骤：</li><li>比较相邻元素，如果第一个比第二个大就交换他们，</li><li>对每一个相邻元素做相同的工作，执行完毕后找到一个最大值</li><li>重复以上的工作，每次比较次数减小1，直到不需要比较</li></ol><p>冒泡法——存在一定的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//冒泡法</span><br><span class="line">int arr[] = &#123; 11, 2, 3, 14, 5, 6, 7, 8, 9, 10, 15 &#125;;</span><br><span class="line">int len = sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">// cout &lt;&lt; len;</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125;</span><br><span class="line">cout &lt;&lt; &quot;冒泡前&quot; &lt;&lt; endl;</span><br><span class="line">for (int j = 1; j &lt; len; j++) &#123;</span><br><span class="line">for (int i = 0; i &lt; len - 1; i++)//比较次数</span><br><span class="line">&#123;</span><br><span class="line">if (arr[i] &gt; arr[i + 1]) &#123; int c = arr[i + 1]; arr[i + 1] = arr[i]; arr[i] = c; &#125;//第一个数字大交换顺序</span><br><span class="line">&#125;//结束后</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125;</span><br><span class="line">cout &lt;&lt; &quot;冒泡后&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减少比较流程步骤后的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//冒泡法</span><br><span class="line"></span><br><span class="line">int arr[] = &#123; 4,2,8,0,5,7,1,3,9 &#125;;</span><br><span class="line">//第一8次对比</span><br><span class="line">//第二7次对比</span><br><span class="line">for (int i = 8; i &gt; 0; i--)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j&lt;i; j++)</span><br><span class="line">&#123;</span><br><span class="line">if (arr[j] &gt; arr[j + 1]) </span><br><span class="line">&#123; </span><br><span class="line">int c = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = c; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; 9; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-二维数组"><a href="#5-2-二维数组" class="headerlink" title="5.2 二维数组"></a>5.2 二维数组</h2><p>二维数组就是在一维数组的基础上多加了一个维度<br>定义方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 数据类型 数组名[行数][列数];</span><br><span class="line">1. 数组类型 数组名[行数][列数]=&#123;&#123;1,2&#125;,&#123;1,2&#125;&#125;;</span><br><span class="line">1. 数据类型 数组名[行数][列数]=&#123;1,2,3,4&#125;;</span><br><span class="line">1. 数据类型 数组名[][列数]=&#123;1,2,3,4&#125;;</span><br><span class="line">第二章更客观，具有更强的可读性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//二位数组；</span><br><span class="line"></span><br><span class="line">//1. 数据类型 数组名[行数][列数];</span><br><span class="line">//1. 数组类型 数组名[行数][列数] = &#123; &#123;1,2&#125;,&#123;1,2&#125; &#125;;</span><br><span class="line">//1. 数据类型 数组名[行数][列数] = &#123; 1,2,3,4 &#125;;</span><br><span class="line">//1. 数据类型 数组名[][列数] = &#123; 1,2,3,4 &#125;;</span><br><span class="line">int arr[2][3]; </span><br><span class="line">arr[0][0] = 1;</span><br><span class="line">arr[0][1] = 2;</span><br><span class="line">arr[0][2] = 3;</span><br><span class="line">/*cout &lt;&lt; arr[0][1] &lt;&lt; endl;*/</span><br><span class="line">//外层循环打印行数，内层循环打印列数</span><br><span class="line">for (int i = 0; i &lt; 2; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; 3; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i][j] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int arr2[2][3] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;1,2,3&#125;,</span><br><span class="line">&#123;4,5,6&#125;//第二种方法可读性更强</span><br><span class="line">&#125;;</span><br><span class="line">int arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;;</span><br><span class="line">int arr4[][3] = &#123; 1,2,3,4,5,6 &#125;;</span><br><span class="line">for (int i = 0; i &lt; 2; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; 3; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr4[i][j] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-1-二位数组数组名称"><a href="#5-2-1-二位数组数组名称" class="headerlink" title="5.2.1 二位数组数组名称"></a>5.2.1 二位数组数组名称</h2><ol><li>查看二位数组所占的内存大小</li><li>查看二位数组的首地址</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int arr2[2][3] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;1,2,3&#125;,</span><br><span class="line">&#123;4,5,6&#125;//第二种方法可读性更强</span><br><span class="line">&#125;;</span><br><span class="line">cout &lt;&lt; &quot;二位数组所占的空间大小&quot; &lt;&lt; sizeof(arr2)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; &quot;二维数组第一行所占的内存空间&quot; &lt;&lt; sizeof(arr2[0]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;第一个元素所占的内存&quot; &lt;&lt; sizeof(arr2[0][0]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;二维数组的行数&quot; &lt;&lt; sizeof(arr2) / sizeof(arr2[0]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;二维数组的列数&quot; &lt;&lt; sizeof(arr2[0]) / sizeof(arr2[0][0]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;数组的首地址&quot; &lt;&lt; (int)arr2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;数组第一行的首地址&quot; &lt;&lt; (int)arr2[0] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二位数组的应用案例"><a href="#二位数组的应用案例" class="headerlink" title="二位数组的应用案例"></a>二位数组的应用案例</h2><p>考试成绩统计<br>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩如下表，请分别输出三名同学的总成绩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//string names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;</span><br><span class="line">string names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;</span><br><span class="line"></span><br><span class="line">int score[3][3] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;100,100,100&#125;,</span><br><span class="line">&#123;90,50,100&#125;,</span><br><span class="line">&#123;60,70,80&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int arr[3];</span><br><span class="line">//输出三名同学的总成绩</span><br><span class="line">for (int i = 0; i &lt; 3; i++)</span><br><span class="line">&#123;</span><br><span class="line">int sum = 0;</span><br><span class="line">for (int j = 0; j &lt; 3;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + score[i][j];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = sum;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; 3; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; names[i]&lt;&lt;&quot;的成绩为：&quot; &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（四）程序流程结构</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E5%9B%9B%EF%BC%89%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E5%9B%9B%EF%BC%89%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h1><p>c&#x2F;cpp支持最基本的三种程序运行结构</p><ol><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ol><h2 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h2><p>作用：执行满足条件的语句<br>if语句的三种形式</p><ol><li>单行格式if语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cpp</span><br><span class="line">if(score&gt;600)&#123;输出条件&#125;</span><br><span class="line">python:</span><br><span class="line">if score&gt;600:</span><br><span class="line">输出内容</span><br></pre></td></tr></table></figure></li><li>多行格式if语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(条件)&#123;&#125;</span><br><span class="line">else&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>多条件if语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if()&#123;&#125;</span><br><span class="line">else if()&#123;&#125;</span><br><span class="line">else if()&#123;&#125;</span><br><span class="line">else&#123;&#125;</span><br><span class="line"></span><br><span class="line">python </span><br><span class="line">if a&gt;600:</span><br><span class="line"></span><br><span class="line">elif a&gt;500:</span><br><span class="line"></span><br><span class="line">elif a&gt;400:</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>嵌套if语句<br>案例一：择校<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">/*</span><br><span class="line">* 如果用户输出大于600分则考上好大学</span><br><span class="line">*/</span><br><span class="line">int score = 0;</span><br><span class="line">cout &lt;&lt; &quot;请输入用户考试分数&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line">cout &lt;&lt; &quot;您输入的分数位&quot; &lt;&lt; score &lt;&lt; endl;</span><br><span class="line">if (score &gt; 600) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;恭喜您考上了一个较好的大学&quot;&lt;&lt;endl;</span><br><span class="line">if (score &gt; 700) &#123;</span><br><span class="line">cout &lt;&lt; &quot;您成功考上了北京大学&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">if (score &gt; 650)</span><br><span class="line">cout &lt;&lt; &quot;您考上了清华大学&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else if(score&gt;500)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;您考上一个大学&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;您未考上一个大学&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>案例二：三只小猪称体重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//有三只小猪称体重，分别输入三只小猪体重，判断那只小猪最重</span><br><span class="line">//输出三只小猪重量</span><br><span class="line">//两两比较选出最重的小猪</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int A, B, C = 0;</span><br><span class="line">cout &lt;&lt; &quot;请分别输入小猪A，B，C的体重&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; A&gt;&gt;B&gt;&gt;C;</span><br><span class="line">int flag = 0;</span><br><span class="line">if (A &gt; B &amp;&amp; A &gt; C) &#123; flag = 0; cout &lt;&lt; &quot;小猪A最重&quot; &lt;&lt; endl; &#125;</span><br><span class="line">else if(B &gt; A &amp;&amp; B &gt; C) &#123; flag = 1; cout &lt;&lt; &quot;小猪B最重&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123; flag = 2; cout &lt;&lt; &quot;小猪C最重&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-三目运算符————？————：————"><a href="#4-2-三目运算符————？————：————" class="headerlink" title="4.2 三目运算符————？————：————"></a>4.2 三目运算符————？————：————</h2><p>表达式1? 表达式2：表达式3<br>解释：如果1为true,执行2，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">//将较大的值赋值给c</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">int c = 0;</span><br><span class="line">c = (a &gt; b ? c = a : c = b);</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">(a &gt; b ? a : b) = 100;</span><br><span class="line">cout &lt;&lt; &quot;b=&quot; &lt;&lt; b &lt;&lt; endl&lt;&lt;&quot;a=&quot; &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-switch语句"><a href="#4-2-switch语句" class="headerlink" title="4.2 switch语句"></a>4.2 switch语句</h2><p>switch(表达式)<br>{<br>case 结果1：执行语句;break;<br>case 结果2：执行语句;break;<br>…<br>default: 执行语句;break;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//// switch语句</span><br><span class="line">//// 给电影进行打分</span><br><span class="line">////10-9经典</span><br><span class="line">////8-7 优秀</span><br><span class="line">////6-5 一般</span><br><span class="line">////5以下 很一般</span><br><span class="line">////1.请求用户打分</span><br><span class="line">////2.根据用户输入分数提示用户结果</span><br><span class="line">int a = 0;</span><br><span class="line">cout &lt;&lt; &quot;请给电影进行打分&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">cout &lt;&lt; &quot;给电影打分为&quot; &lt;&lt; a &lt;&lt; &quot;分&quot; &lt;&lt; endl;</span><br><span class="line">switch(a)//switch缺点，判断是只能是整形或者字符型，不可以是一个区间</span><br><span class="line">//优点：结构清晰，执行效率高</span><br><span class="line">&#123;</span><br><span class="line">case 10:</span><br><span class="line">cout &lt;&lt; &quot;您认为是经典电影&quot; &lt;&lt; endl; break;</span><br><span class="line">case 9:</span><br><span class="line">cout &lt;&lt; &quot;您认为是经典电影&quot; &lt;&lt; endl; break;</span><br><span class="line">case 8:</span><br><span class="line">cout &lt;&lt; &quot;您认为电影很优秀&quot; &lt;&lt; endl; break;</span><br><span class="line">default :</span><br><span class="line">cout &lt;&lt; &quot;您认为电影很一般&quot; &lt;&lt; endl; break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-循环结构"><a href="#4-3-循环结构" class="headerlink" title="4.3 循环结构"></a>4.3 循环结构</h2><p>意义：满足u西南华南条件，执行循环语句<br>while(满足条件){循环语句}<br>注意：满足条件才开始执行，否则则退出循环结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//int a = 0;</span><br><span class="line">//cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">//while (a &lt;= 9) &#123;</span><br><span class="line">//cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">//a++;</span><br><span class="line">//&#125;</span><br><span class="line">//猜数字1-100中的数据</span><br><span class="line">//1.随机生成一个1-100之间的数字</span><br><span class="line">//2.给出反馈过大或者过小</span><br><span class="line">//猜对，退出游戏；</span><br><span class="line">//猜错，继续游戏</span><br><span class="line">srand((unsigned)time(NULL));</span><br><span class="line">int a = rand() % 100 + 1;//rand()生成随机数1-2**31</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">int b = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">cout &lt;&lt; &quot;请输入您猜想的大小&quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; b;</span><br><span class="line">if (a == b) &#123; cout &lt;&lt; &quot;猜对了&quot; &lt;&lt; endl; break; &#125;</span><br><span class="line">if (a &gt; b) &#123; cout &lt;&lt;b&lt;&lt; &quot;猜小了&quot; &lt;&lt; endl; &#125;</span><br><span class="line">if (a &lt; b) &#123; cout &lt;&lt;b&lt;&lt; &quot;猜大了&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-do-…-while"><a href="#4-4-do-…-while" class="headerlink" title="4.4 do … while"></a>4.4 do … while</h2><p>do{循环语句} while（循环条件）;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//int a = 0;</span><br><span class="line">//do &#123; cout &lt;&lt; a &lt;&lt; endl; a++; &#125; while (a &lt; 10);</span><br><span class="line">//</span><br><span class="line">int num = 100;</span><br><span class="line">do </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int a = num / 100; </span><br><span class="line">int b = num / 10 - 10 * a; </span><br><span class="line">int c = num / 1 - 100 * a - 10 * b;</span><br><span class="line">int num1 = pow(a,3) +pow(b,3) + pow(c,3);</span><br><span class="line">/*cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl &lt;&lt; num1 &lt;&lt; endl;*/</span><br><span class="line">if (num1 == num) &#123; cout &lt;&lt; &quot;水仙花数：&quot; &lt;&lt; num &lt;&lt; endl; &#125;</span><br><span class="line">num++;</span><br><span class="line">&#125; while (num &lt; 1000);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-for-循环语句"><a href="#4-5-for-循环语句" class="headerlink" title="4.5 for 循环语句"></a>4.5 for 循环语句</h2><p>满足循环条件，执行循环语句<br>for(起始表达式;条件表达式;末尾表达式){循环语句;}<br>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 0;</span><br><span class="line">for (int i = 0;; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">if (i &gt;= 9) &#123; break; &#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-1-案例敲桌子"><a href="#4-5-1-案例敲桌子" class="headerlink" title="4.5.1 案例敲桌子"></a>4.5.1 案例敲桌子</h2><p>敲桌子<br>从1——100，个位还有7，或者十位还有7，7的倍数，打印敲桌子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">for(int i = 1; i &lt; 101; i++)</span><br><span class="line">&#123;</span><br><span class="line">int a = i % 7;//a的余数</span><br><span class="line">int b = i / 10;</span><br><span class="line">int c = i - 10 * b;</span><br><span class="line"></span><br><span class="line">if (a == 0 || b == 7||c==7) &#123; cout &lt;&lt; i &lt;&lt; &quot;敲桌子&quot; &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p>利用嵌套循环实验星图<br>打印一行星图10*10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//外层循环</span><br><span class="line">for (int z = 1; z &lt;= 10; z++) </span><br><span class="line">&#123;</span><br><span class="line">for (int i = 1; i &lt;= 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">//内层循环</span><br><span class="line">cout &lt;&lt; &quot;* &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="乘法口诀表"><a href="#乘法口诀表" class="headerlink" title="乘法口诀表"></a>乘法口诀表</h2><p>利用嵌套循环实现九九乘法表<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> #include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//外层循环</span><br><span class="line">for (int i = 1; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 1; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; &quot;*&quot; &lt;&lt; j &lt;&lt; &quot;=&quot; &lt;&lt; i * j &lt;&lt; &quot;\t&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-6-跳转语句"><a href="#4-6-跳转语句" class="headerlink" title="4.6 跳转语句"></a>4.6 跳转语句</h2><p> 作用：跳出选择结构或者循环结构</p><ol><li>出现在switch中终止case并且推出switch</li><li>出现在循环语句中，作用是推出当前的循环语句</li><li>出现在嵌套循环中，退出最近的循环</li></ol><h2 id="4-7-continue语句"><a href="#4-7-continue语句" class="headerlink" title="4.7 continue语句"></a>4.7 continue语句</h2><p>作用:在循环语句中，跳过本次循环中尚未执行的语句，继续执行下一次循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//输出奇数，偶数不输出；</span><br><span class="line">for (int i =1; i &lt;= 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (i % 2 == 0) &#123; continue; //筛选条件，此后不再执行&#125;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;//break会退出循环而continue则不会推出</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-8-goto语句"><a href="#4-8-goto语句" class="headerlink" title="4.8 goto语句"></a>4.8 goto语句</h2><p>可以无条件跳转语句<br>goto 标记;<br>过于强大，很少使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">//goto语句</span><br><span class="line">cout &lt;&lt; &quot;1************&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;2************&quot; &lt;&lt; endl;</span><br><span class="line">goto flag;</span><br><span class="line">cout &lt;&lt; &quot;3************&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;4************&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;5************&quot; &lt;&lt; endl;</span><br><span class="line">flag:</span><br><span class="line">cout &lt;&lt; &quot;6************&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（三）运算符号</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%B8%89%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%B8%89%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>主要用于代码的计算</p><ol><li>算术运算符</li><li>赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ol><h2 id="3-1-计算运算符"><a href="#3-1-计算运算符" class="headerlink" title="3.1 计算运算符"></a>3.1 计算运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">5+3</td></tr><tr><td align="left">-</td><td align="left">5-3</td></tr><tr><td align="left">*</td><td align="left">5*3</td></tr><tr><td align="left">&#x2F;</td><td align="left">10&#x2F;2&#x3D;5，取整，将小数部分移除</td></tr><tr><td align="left">%</td><td align="left">10%3&#x3D;1，去摸运算，求余数，只有整数才能取模运算</td></tr><tr><td align="left">++</td><td align="left">前置递增，++a，让变量加1，先+1，在进行计算</td></tr><tr><td align="left">++</td><td align="left">后置递增，a++，后让变量加1，先+1，先进行计算</td></tr><tr><td align="left">–</td><td align="left">同前置后置递增</td></tr></tbody></table><h2 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h2><p>将表达式的数值赋值给变量</p><table><thead><tr><th align="left">运算符</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">a&#x3D;10</td></tr><tr><td align="left">+&#x3D;</td><td align="left">a&#x3D;10;a+&#x3D;10;a&#x3D;20</td></tr><tr><td align="left">-&#x3D;</td><td align="left">同理</td></tr><tr><td align="left">*&#x3D;</td><td align="left">同理</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">同理</td></tr><tr><td align="left">%&#x3D;</td><td align="left">同理</td></tr></tbody></table><h2 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h2><p>作用于表达式的比较，并返回一个真值或者假值</p><table><thead><tr><th align="left">运算符</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">同理</td></tr><tr><td align="left">!&#x3D;</td><td align="left">同理</td></tr><tr><td align="left">&lt;</td><td align="left">同理</td></tr><tr><td align="left">&gt;</td><td align="left">同理</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">同理</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">同理</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>用于根据表达式的值返回真值或者假值</p><table><thead><tr><th align="left">运算符</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">！</td><td align="left">非</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">and</td></tr><tr><td align="left">||</td><td align="left">or</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（二）数据类型</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="cpp学习文档（二）"><a href="#cpp学习文档（二）" class="headerlink" title="cpp学习文档（二）"></a>cpp学习文档（二）</h1><h1 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h1><p>cpp规定了在定义数据名称变量或者常量的时候必须指定数据类型<br>type name&#x3D;inital;<br>数据类型存在的意义，给变量分配合适的内存空间<br>（不同类型占据不同大小的内存空间）</p><h2 id="2-2-整型"><a href="#2-2-整型" class="headerlink" title="2.2 整型"></a>2.2 整型</h2><p>超出范围之后报错，回归最小值</p><table><thead><tr><th align="center">不同整形类型</th><th align="center">占据内存大小字节</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">short</td><td align="center">2</td><td align="center">±2^15</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">± 2 ^31</td></tr><tr><td align="center">long</td><td align="center">4</td><td align="center">± 2^31</td></tr><tr><td align="center">longlong</td><td align="center">8</td><td align="center">±2^63</td></tr></tbody></table><h2 id="2-3-sizeof"><a href="#2-3-sizeof" class="headerlink" title="2.3 sizeof"></a>2.3 sizeof</h2><p>利用sizeof求出数据类型占用内存大小<br>sizeof（short）</p><h2 id="2-4-实型（浮点数）"><a href="#2-4-实型（浮点数）" class="headerlink" title="2.4 实型（浮点数）"></a>2.4 实型（浮点数）</h2><p>意义：表示小数<br>浮点型小数表示两种：1. 单精度小数float   2. 多精度小数double<br>默认情况下会展示6位有效数字<br>统计数据类型所占内存空间 sizeof（float）<br>其他：科学计数法 <code> float f=3e2;</code> 3*10^2</p><table><thead><tr><th align="center">数据类型</th><th align="center">占用字节</th><th align="center">有效数字范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4</td><td align="center">7位有效数字</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">15-16位有效数字</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float p = 3.14f;//默认双精度，float定义多做一个转化</span><br><span class="line">double p1=3.14;//双精度不需要更改</span><br></pre></td></tr></table></figure><h2 id="2-5-字符型变量"><a href="#2-5-字符型变量" class="headerlink" title="2.5 字符型变量"></a>2.5 字符型变量</h2><p>意义：字符型变量用于显示单个字符<br>char ch&#x3D;’d’，创建字符型变量只能用单引号<br>占用1个字节大小<br>字符型变量不是将本身放到内存中而是ASCII编码放到储存单元里<br>（int）ch&#x2F;&#x2F;ASCII码强转为整形  A 65  A  97</p><h2 id="2-6-转义字符"><a href="#2-6-转义字符" class="headerlink" title="2.6 转义字符"></a>2.6 转义字符</h2><p>换行符 \n<br>输出特殊符号 \  print\<br>水平制表符 \t ——整齐的输出数据</p><h2 id="2-7-字符串"><a href="#2-7-字符串" class="headerlink" title="2.7 字符串"></a>2.7 字符串</h2><p>用于表示一串字符</p><ol><li>char str[]&#x3D;”hello world”  1. [] 2. “”  &#x2F;&#x2F;c++字符串</li><li>string str &#x3D;”hello world”  &#x2F;&#x2F;cpp风格字母串  需要包含头文件 #include <string></li></ol><h2 id="2-8布尔类型bool"><a href="#2-8布尔类型bool" class="headerlink" title="2.8布尔类型bool"></a>2.8布尔类型bool</h2><p>定义：布尔类型数据代表真或者假<br>只有两个值 true 真(1)   false 假(0)<br>bool占用一个字节大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool flag=true；</span><br><span class="line">cout&lt;&lt;sizeof(flag):flag &lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="2-9数据的输入cin"><a href="#2-9数据的输入cin" class="headerlink" title="2.9数据的输入cin"></a>2.9数据的输入cin</h2><p>cin&gt;&gt;变量<br>布尔类型非0都等于1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a=0</span><br><span class="line">cout&lt;&lt;&quot;请给整形数字a赋值&quot;&lt;&lt;endl;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">cout&lt;&lt;&quot;整形数字a=&quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp学习文档（一）基本内容</title>
      <link href="/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9/"/>
      <url>/2024/07/01/cpp%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="cpp学习文档（一）"><a href="#cpp学习文档（一）" class="headerlink" title="cpp学习文档（一）"></a>cpp学习文档（一）</h1><h2 id="一、hello-world"><a href="#一、hello-world" class="headerlink" title="一、hello world"></a>一、hello world</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//引入头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//防止变量问题出现错误</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello world!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>cpp源文件中必须有且只能出现一个main函数，main函数是程序的一个入口<br>可通过注释解决&#x2F;* *&#x2F;</li><li>iostream 输入输出数据流，包含数据缓存区</li><li>注释单行注释、多行注释</li><li>&#x2F;&#x2F; 详细信息  &#x2F;<em>注释内容</em>&#x2F;</li><li>endl 换行并清空数据缓存区</li></ol><h2 id="二、单双行注释"><a href="#二、单双行注释" class="headerlink" title="二、单双行注释"></a>二、单双行注释</h2><p>&#x2F;&#x2F; 详细信息 单行注释<br>&#x2F;<em>注释内容</em>&#x2F;  多行注释</p><h2 id="三、变量的意义"><a href="#三、变量的意义" class="headerlink" title="三、变量的意义"></a>三、变量的意义</h2><p>定义：给一段指定的内存空间起名<br>意义：方便管理内存空间<br>方法：1.  内存地址 2.内存命名   type（数据类型） 数据名&#x3D;变量初始值；<code> int a=10;</code></p><h2 id="四、常量的意义"><a href="#四、常量的意义" class="headerlink" title="四、常量的意义"></a>四、常量的意义</h2><p>程序中不可改变的数值</p><ol><li>#define   宏常量  通常在程序顶部  #define 常量名 常量值</li><li>const   变量定义前加const        const 数据类型 常量名&#x3D;初始数值</li></ol><h2 id="五、关键字"><a href="#五、关键字" class="headerlink" title="五、关键字"></a>五、关键字</h2><p>程序中变量中不可用的变量名</p><h2 id="六、标识符号命名规则"><a href="#六、标识符号命名规则" class="headerlink" title="六、标识符号命名规则"></a>六、标识符号命名规则</h2><p>字母、数字、下划线<br>首字母不能是数字，可以是字母与下划线<br>标识符号区分大小写<br>命名标识符号的时候最好可以见名知意的作用</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习文档的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pytorch的基本应用（一）——手写数字识别</title>
      <link href="/2024/05/15/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2024/05/15/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><p>本文主要介绍pytorch的基础用法，以pytorch官网的手写数字识别为例子，来介绍pytorch基础框架</p><h1 id="pytorch基本框架"><a href="#pytorch基本框架" class="headerlink" title="pytorch基本框架"></a>pytorch基本框架</h1><p>主要介绍pytorch的基本用法</p><ol><li>基本知识pytorch——基本数据张量——tensor介绍基本知识同np数组</li><li>dataset and dataloader——数据集准备与数据集预处理</li><li>transform——将数据转换为tensor——数据正则化  totensor  and 自定义张量正则化</li><li>model——利用convolution、pool等等构建神经网络模型nn.models</li><li>apt、loss优化器、损失函数</li><li>train and test、load and save models</li></ol><h1 id="前提条件——环境搭建——深度学习基础"><a href="#前提条件——环境搭建——深度学习基础" class="headerlink" title="前提条件——环境搭建——深度学习基础"></a>前提条件——环境搭建——深度学习基础</h1><ol><li>下载anaconda<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n num_pre python=<span class="number">3.7</span> <span class="comment">#创建虚拟环境</span></span><br><span class="line">conda activate num_pre <span class="comment">#激活虚拟环境</span></span><br><span class="line"><span class="comment"># conda deactivate num_pre #取消虚拟环境</span></span><br></pre></td></tr></table></figure><a href="http://t.csdnimg.cn/xWzqC%22anaconda%E4%B8%8B%E8%BD%BD%E6%95%99%E7%A8%8B%22">anaconda</a>下载可参考</li><li>配置pytorch环境<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CPU Only</span></span><br><span class="line">conda install pytorch==<span class="number">2.0</span><span class="number">.0</span> torchvision==<span class="number">0.15</span><span class="number">.0</span> torchaudio==<span class="number">2.0</span><span class="number">.0</span> cpuonly -c pytorch</span><br><span class="line"><span class="comment">#仅cpu运行</span></span><br><span class="line">如使用GPU加速则下载cuda 与 cudaa配置环境，版本需要与torch版本对应</span><br><span class="line">[cuda与cudnn下载教程](http://t.csdnimg.cn/HZtXh)</span><br></pre></td></tr></table></figure></li></ol><h1 id="开始进行程序编写"><a href="#开始进行程序编写" class="headerlink" title="开始进行程序编写"></a>开始进行程序编写</h1><p>基本原理：</p><p>图像原大小28<em>28——flatten784——model（28</em>28——10（number））结合标签含义即可完成预测种类</p><p>训练本质</p><p>即首先将图像28*28——展开为784——输入神经网络后输出为10，利用损失函数和优化器——不断优化网络参数，使loss尽可能减小</p><p>预测本质</p><p>即首先将图像28*28——展开为784——输入神经网络后输出为10——softmax[10]维度向量，利用y_pre.argmax（），获得概率最大的值所对应的索引，结合labels具体意义</p><p>完成预测</p><ol><li><p>数据集加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#进行手写服装数据集的下载与dataload装载</span></span><br><span class="line"> </span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"><span class="comment">#标签类别注释</span></span><br><span class="line">labels_map = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;T-Shirt&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;Trouser&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;Pullover&quot;</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">&quot;Dress&quot;</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">&quot;Coat&quot;</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">&quot;Sandal&quot;</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">&quot;Shirt&quot;</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">&quot;Sneaker&quot;</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">&quot;Bag&quot;</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">&quot;Ankle Boot&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#实现数据的装载</span></span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#数据的可视化</span></span><br><span class="line">train_features, train_labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_dataloader))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Feature batch shape: <span class="subst">&#123;train_features.size()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Labels batch shape: <span class="subst">&#123;train_labels.size()&#125;</span>&quot;</span>)</span><br><span class="line">img = train_features[<span class="number">0</span>].squeeze()</span><br><span class="line">label = train_labels[<span class="number">0</span>]</span><br><span class="line">plt.imshow(img, cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Label: <span class="subst">&#123;label&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>model搭建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义传播网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义所使用的设备——是否使用cuda and cudnn</span></span><br><span class="line">device = (</span><br><span class="line">    <span class="string">&quot;cuda&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;mps&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.backends.mps.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Using <span class="subst">&#123;device&#125;</span> device&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#模型加载到网络</span></span><br><span class="line">model = NeuralNetwork().to(device)</span><br></pre></td></tr></table></figure></li><li><p>损失器与优化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment">#损失函数相关讲解</span></span><br><span class="line">x = torch.ones(<span class="number">5</span>)  <span class="comment"># input tensor</span></span><br><span class="line">y = torch.zeros(<span class="number">3</span>)  <span class="comment"># expected output</span></span><br><span class="line">w = torch.randn(<span class="number">5</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = torch.matmul(x, w)+b</span><br><span class="line">loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)</span><br><span class="line"><span class="comment">#误差反向传播更新权重</span></span><br><span class="line">loss.requires_grad<span class="comment">#开启梯度计算</span></span><br><span class="line">loss.grad.zero_() <span class="comment">#梯度归零</span></span><br><span class="line">loss.backward()<span class="comment">#误差反向传播</span></span><br><span class="line">loss.step()<span class="comment">#权值更新</span></span><br><span class="line"><span class="built_in">print</span>(w.grad)<span class="comment">#输出权值梯度</span></span><br><span class="line"><span class="built_in">print</span>(b.grad)</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"> </span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"> </span><br><span class="line">model = NeuralNetwork()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">epochs = <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Initialize the loss function</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_loop</span>(<span class="params">dataloader, model, loss_fn, optimizer</span>):</span><br><span class="line">    size = <span class="built_in">len</span>(dataloader.dataset)</span><br><span class="line">    <span class="comment"># Set the model to training mode - important for batch normalization and dropout layers</span></span><br><span class="line">    <span class="comment"># Unnecessary in this situation but added for best practices</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch, (X, y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">        <span class="comment"># Compute prediction and loss</span></span><br><span class="line">        pred = model(X)</span><br><span class="line">        loss = loss_fn(pred, y)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Backpropagation</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> batch % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            loss, current = loss.item(), batch * batch_size + <span class="built_in">len</span>(X)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;loss: <span class="subst">&#123;loss:&gt;7f&#125;</span>  [<span class="subst">&#123;current:&gt;5d&#125;</span>/<span class="subst">&#123;size:&gt;5d&#125;</span>]&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_loop</span>(<span class="params">dataloader, model, loss_fn</span>):</span><br><span class="line">    <span class="comment"># Set the model to evaluation mode - important for batch normalization and dropout layers</span></span><br><span class="line">    <span class="comment"># Unnecessary in this situation but added for best practices</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    size = <span class="built_in">len</span>(dataloader.dataset)</span><br><span class="line">    num_batches = <span class="built_in">len</span>(dataloader)</span><br><span class="line">    test_loss, correct = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Evaluating the model with torch.no_grad() ensures that no gradients are computed during test mode</span></span><br><span class="line">    <span class="comment"># also serves to reduce unnecessary gradient computations and memory usage for tensors with requires_grad=True</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> dataloader:</span><br><span class="line">            pred = model(X)</span><br><span class="line">            test_loss += loss_fn(pred, y).item()</span><br><span class="line">            correct += (pred.argmax(<span class="number">1</span>) == y).<span class="built_in">type</span>(torch.<span class="built_in">float</span>).<span class="built_in">sum</span>().item()</span><br><span class="line"> </span><br><span class="line">    test_loss /= num_batches</span><br><span class="line">    correct /= size</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Test Error: \n Accuracy: <span class="subst">&#123;(<span class="number">100</span>*correct):&gt;<span class="number">0.1</span>f&#125;</span>%, Avg loss: <span class="subst">&#123;test_loss:&gt;8f&#125;</span> \n&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">epochs = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;t+<span class="number">1</span>&#125;</span>\n-------------------------------&quot;</span>)</span><br><span class="line">    train_loop(train_dataloader, model, loss_fn, optimizer)</span><br><span class="line">    test_loop(test_dataloader, model, loss_fn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> pytorch的基本应用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一生有你</title>
      <link href="/2024/05/14/%E4%B8%80%E7%94%9F%E6%9C%89%E4%BD%A0/"/>
      <url>/2024/05/14/%E4%B8%80%E7%94%9F%E6%9C%89%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一生有你"><a href="#一生有你" class="headerlink" title="一生有你"></a>一生有你</h1><!-- #<video src="[视频链接](https://www.bilibili.com/video/BV1GU4y1s7J1?t=7.7)"></video> --><!-- <video src="https://www.bilibili.com/video/BV1GU4y1s7J1?t=7.7"></video> --><!--<iframe height="100%" width="100%" src="https://www.bilibili.com/video/BV1GU4y1s7J1?t=7.7" allow="fullscreen" scrolling="auto">--><iframe id="iframe"        name="iframe"        height="500"        width="800"        src="https://www.bilibili.com/video/BV1GU4y1s7J1?t=7.7"        scrolling="auto"        frameborder="0"        onload="changeFrameHeight()"></iframe><script>  // 获取iframe元素  var iframe = document.getElementById('myFrame');  var iframeDoc = iframe.contentDocument || iframe.contentWindow.document; <p>  &#x2F;&#x2F; 等待iframe内容加载完成<br>  iframe.onload &#x3D; function() {<br>    &#x2F;&#x2F; 获取iframe内的视频元素<br>    var video &#x3D; iframeDoc.getElementById(‘myVideo’);</p><pre><code>// 设置视频全屏video.width = iframeDoc.body.clientWidth;video.height = iframeDoc.body.clientHeight;// 监听窗口大小改变事件window.onresize = function() &#123;  if (video) &#123;    video.width = iframeDoc.body.clientWidth;    video.height = iframeDoc.body.clientHeight;  &#125;&#125;;</code></pre><p>  };<br></script></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>穷开心</title>
      <link href="/2024/05/14/%E7%A9%B7%E5%BC%80%E5%BF%83/"/>
      <url>/2024/05/14/%E7%A9%B7%E5%BC%80%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="穷开心"><a href="#穷开心" class="headerlink" title="穷开心"></a>穷开心</h1><!-- #<video src="[视频链接](https://www.bilibili.com/video/BV1GU4y1s7J1?t=7.7)"></video> --><!-- <video src="https://www.bilibili.com/video/BV1GU4y1s7J1?t=7.7"></video> --><iframe height=498 width=510 src="https://www.bilibili.com/video/BV1br4y1U7e4" allow="fullscreen">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/05/01/first/"/>
      <url>/2024/05/01/first/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇文章"><a href="#我的第一篇文章" class="headerlink" title="我的第一篇文章"></a>我的第一篇文章</h1><p>本博客主要记录一些日常技术学习，本文为第一篇博客</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1985/10/26/hello-world/"/>
      <url>/1985/10/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
